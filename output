Taymours-MacBook-Pro:compilier taymourabdelal$ lex lex.l
Taymours-MacBook-Pro:compilier taymourabdelal$ gcc lex.yy.c y.tab.c -ll
Taymours-MacBook-Pro:compilier taymourabdelal$ ./a.out
 >>> Parsing <<<< 

extstmt_list : Epsilon -> Line No. (1)
datatype: TYPE_VOID ->Line No.(1)
funcprot: datatype(TYPE_VOID) IDENTIFIER(try) ARGUMENT_OPENBRACKET ARGUMENT_CLOSEBRACKET -> Line No. (1)
stmt: funcprot -> Line No. (1)
extstmt_list : extstmt_list extstmt Line Number -> (1)
datatype: TYPE_VOID ->Line No.(2)
datatype: TYPE_INT ->Line No.(2)
parameters : datatype IDENTIFIER(x) -> Line No.(2)
funcprot: datatype(TYPE_VOID) IDENTIFIER(try1) ARGUMENT_OPENBRACKET parameters ARGUMENT_CLOSEBRACKET -> Line No. (2)
stmt: funcprot -> Line No. (2)
extstmt_list : extstmt_list extstmt Line Number -> (2)

code : Epsilon -> Line No. (4)

datatype: TYPE_INT ->Line No.(5)
decl : datatype(TYPE_INT) IDENTIFIER (x) SEMICOLON -> Line No. (5)
stmt : decl -> Line No. (5)
code : code stmt -> Line No. (5)

datatype: TYPE_INT ->Line No.(6)
value : VALUE_INT (3) - > Line No. (6) 
exp: value (3) ->Line No.(6)
value : VALUE_INT (5) - > Line No. (6) 
exp: value (5) ->Line No.(6)
value : VALUE_INT (3) - > Line No. (6) 
exp: value (3) ->Line No.(6)
exp: exp (5) OPERATOR_MINUS exp(3) ->Line No.(6)
exp: ARGUMENT_OPENBRACKET  exp(5) ARGUMENT_CLOSEBRACKET ->Line No.(6)
value : VALUE_INT (7) - > Line No. (6) 
exp: value (7) ->Line No.(6)
exp: exp (3) OPERATOR_MULTIPLY exp(7) ->Line No.(6)
exp: exp (3) OPERATOR_PLUS exp(3) ->Line No.(6)
value : VALUE_INT (20) - > Line No. (6) 
exp: value (20) ->Line No.(6)
exp: exp (3) OPERATOR_PLUS exp(20) ->Line No.(6)
decl : datatype(TYPE_INT) IDENTIFIER (x) OPERATOR_ASSIGNMENT exp SEMICOLON -> Line No. (6)
stmt : decl -> Line No. (6)
code : code stmt -> Line No. (6)

datatype: TYPE_FLOAT ->Line No.(7)
value : VALUE_FLOAT (6.67) - > Line No. (7) 
exp: value (6.67) ->Line No.(7)
decl : datatype(TYPE_FLOAT) IDENTIFIER (myFloat) OPERATOR_ASSIGNMENT exp SEMICOLON -> Line No. (7)
stmt : decl -> Line No. (7)
code : code stmt -> Line No. (7)

datatype: TYPE_STRING ->Line No.(8)
value : VALUE_STRING ("asdsad") - > Line No. (8) 
exp: value ("asdsad") ->Line No.(8)
decl : datatype(TYPE_STRING) IDENTIFIER (myString) OPERATOR_ASSIGNMENT exp SEMICOLON -> Line No. (8)
stmt : decl -> Line No. (8)
code : code stmt -> Line No. (8)

datatype: TYPE_CHAR ->Line No.(9)
value : VALUE_STRING ("c") - > Line No. (9) 
exp: value ("c") ->Line No.(9)
decl : datatype(TYPE_CHAR) IDENTIFIER (myChar) OPERATOR_ASSIGNMENT exp SEMICOLON -> Line No. (9)
stmt : decl -> Line No. (9)
code : code stmt -> Line No. (9)

datatype: TYPE_BOOL ->Line No.(10)
value : VALUE_INT (false) - > Line No. (10) 
exp: value (false) ->Line No.(10)
decl : datatype(TYPE_BOOL) IDENTIFIER (myBool) OPERATOR_ASSIGNMENT exp SEMICOLON -> Line No. (10)
stmt : decl -> Line No. (10)
code : code stmt -> Line No. (10)

datatype: TYPE_BOOL ->Line No.(11)
value : IDENTIFIER(myBool) - > Line No. (11) 
exp: value (myBool) ->Line No.(11)
exp: OPERATOR_NOT exp ->Line No.(11)
decl : datatype(TYPE_BOOL) IDENTIFIER (myBool2) OPERATOR_ASSIGNMENT exp SEMICOLON -> Line No. (11)
stmt : decl -> Line No. (11)
code : code stmt -> Line No. (11)

value : IDENTIFIER(x) - > Line No. (12) 
exp: value (x) ->Line No.(12)
value : VALUE_INT (5) - > Line No. (12) 
exp: value (5) ->Line No.(12)
exp: exp (x) OPERATOR_EQUAL exp(5) ->Line No.(12)
line_list : Epsilon ->  Line No. (12)

datatype: TYPE_INT ->Line No.(13)
value : VALUE_INT (8) - > Line No. (13) 
exp: value (8) ->Line No.(13)
decl : datatype(TYPE_INT) IDENTIFIER (y) OPERATOR_ASSIGNMENT exp SEMICOLON -> Line No. (13)
stmt : decl -> Line No. (13)
line_list : line_list stmt - > Line No.(13)

stmt : ARGUMENT_OPENPARA stmt_list ARGUMENT_CLOSEPARA -> Line No. (14)

 ifstate:IF ARGUMENT_OPENBRACKET exp(x) ARGUMENTARGUMENT_CLOSEDBRACKET stmt stmt -> Line No. (15)
stmt : ifstate  - > Line No. (15)
code : code stmt -> Line No. (15)
datatype: TYPE_INT ->Line No.(15)
value : VALUE_INT (0) - > Line No. (15) 
exp: value (0) ->Line No.(15)
decl : datatype(TYPE_INT) IDENTIFIER (z) OPERATOR_ASSIGNMENT exp SEMICOLON -> Line No. (15)
value : IDENTIFIER(z) - > Line No. (15) 
exp: value (z) ->Line No.(15)
value : VALUE_INT (5) - > Line No. (15) 
exp: value (5) ->Line No.(15)
exp: exp (z) OPERATOR_LESSTHAN exp(5) ->Line No.(15)
value : IDENTIFIER(z) - > Line No. (15) 
exp: value (z) ->Line No.(15)
value : IDENTIFIER(z) - > Line No. (15) 
exp: value (z) ->Line No.(15)
value : VALUE_INT (1) - > Line No. (15) 
exp: value (1) ->Line No.(15)
exp: exp (z) OPERATOR_PLUS exp(1) ->Line No.(15)
exp: exp(z) OPERATOR_ASSIGNMENT exp(z) ->Line No.(15)
line_list : Epsilon ->  Line No. (15)

value : IDENTIFIER(x) - > Line No. (16) 
exp: value (x) ->Line No.(16)
value : IDENTIFIER(x) - > Line No. (16) 
exp: value (x) ->Line No.(16)
value : VALUE_INT (1) - > Line No. (16) 
exp: value (1) ->Line No.(16)
exp: exp (x) OPERATOR_PLUS exp(1) ->Line No.(16)
exp: exp(x) OPERATOR_ASSIGNMENT exp(x) ->Line No.(16)
stmt : exp SEMICOLON  -> Line No. (16)
line_list : line_list stmt - > Line No.(16)

stmt : ARGUMENT_OPENPARA stmt_list ARGUMENT_CLOSEPARA -> Line No. (17)
 loop: FOR ARGUMENT_OPENBRACKET decl exp(z) SEMICOLON exp(z) ARGUMENT_CLOSEBRACKET stmt  -> Line No. (17)
stmt : loop - > Line No. (17)
code : code stmt -> Line No. (17)

value : IDENTIFIER(z) - > Line No. (18) 
exp: value (z) ->Line No.(18)
value : VALUE_INT (10) - > Line No. (18) 
exp: value (10) ->Line No.(18)
exp: exp (z) OPERATOR_LESSTHAN exp(10) ->Line No.(18)
line_list : Epsilon ->  Line No. (18)

value : IDENTIFIER(z) - > Line No. (19) 
exp: value (z) ->Line No.(19)
value : IDENTIFIER(z) - > Line No. (19) 
exp: value (z) ->Line No.(19)
value : VALUE_INT (1) - > Line No. (19) 
exp: value (1) ->Line No.(19)
exp: exp (z) OPERATOR_PLUS exp(1) ->Line No.(19)
exp: exp(z) OPERATOR_ASSIGNMENT exp(z) ->Line No.(19)
stmt : exp SEMICOLON  -> Line No. (19)
line_list : line_list stmt - > Line No.(19)

stmt : ARGUMENT_OPENPARA stmt_list ARGUMENT_CLOSEPARA -> Line No. (20)
loop : WHILE ARGUMENT_OPENBRACKET exp  ARGUMENT_CLOSEBRACKET stmt -> Line No. (20)
stmt : loop - > Line No. (20)
code : code stmt -> Line No. (20)

value : IDENTIFIER(y) - > Line No. (21) 
exp: value (y) ->Line No.(21)
line_list : Epsilon ->  Line No. (21)

case_value: VALUE_INT(1) ->Line No.(22)
line_list : Epsilon ->  Line No. (22)

value : IDENTIFIER(y) - > Line No. (23) 
exp: value (y) ->Line No.(23)
value : IDENTIFIER(y) - > Line No. (23) 
exp: value (y) ->Line No.(23)
value : VALUE_INT (5) - > Line No. (23) 
exp: value (5) ->Line No.(23)
exp: exp (y) OPERATOR_PLUS exp(5) ->Line No.(23)
exp: exp(y) OPERATOR_ASSIGNMENT exp(y) ->Line No.(23)
stmt : exp SEMICOLON  -> Line No. (23)
line_list : line_list stmt - > Line No.(23)

stmt : BREAK SEMICOLON -> Line No. (24)
line_list : line_list stmt - > Line No.(24)

case CASE case_value COLON stmt ->Line No.(25)
case_value: VALUE_INT(2) ->Line No.(25)
line_list : Epsilon ->  Line No. (25)

value : IDENTIFIER(y) - > Line No. (26) 
exp: value (y) ->Line No.(26)
value : IDENTIFIER(y) - > Line No. (26) 
exp: value (y) ->Line No.(26)
value : VALUE_INT (6) - > Line No. (26) 
exp: value (6) ->Line No.(26)
exp: exp (y) OPERATOR_PLUS exp(6) ->Line No.(26)
exp: exp(y) OPERATOR_ASSIGNMENT exp(y) ->Line No.(26)
stmt : exp SEMICOLON  -> Line No. (26)
line_list : line_list stmt - > Line No.(26)

stmt : BREAK SEMICOLON -> Line No. (27)
line_list : line_list stmt - > Line No.(27)

case CASE case_value COLON stmt ->Line No.(28)
line_list : Epsilon ->  Line No. (28)

value : IDENTIFIER(y) - > Line No. (29) 
exp: value (y) ->Line No.(29)
value : IDENTIFIER(y) - > Line No. (29) 
exp: value (y) ->Line No.(29)
value : VALUE_INT (7) - > Line No. (29) 
exp: value (7) ->Line No.(29)
exp: exp (y) OPERATOR_PLUS exp(7) ->Line No.(29)
exp: exp(y) OPERATOR_ASSIGNMENT exp(y) ->Line No.(29)
stmt : exp SEMICOLON  -> Line No. (29)
line_list : line_list stmt - > Line No.(29)

stmt : BREAK SEMICOLON -> Line No. (30)
line_list : line_list stmt - > Line No.(30)

switch : SWITCH ARGUMENT_OPENPARA exp(y) ARGUMENT_CLOSEPARA ARGUMENT_OPENPARA cases DEFAULT COLON stmt_list ARGUMENT_OPENPARA -> Line No. (31)
stmt: switch - > Line No. (31)
code : code stmt -> Line No. (31)



extstmt_list : Epsilon -> Line No. (34)

datatype: TYPE_VOID ->Line No.(35)
datatype: TYPE_INT ->Line No.(35)
parameters : datatype IDENTIFIER(x) -> Line No.(35)

line_list : Epsilon ->  Line No. (36)

value : IDENTIFIER(x) - > Line No. (37) 
exp: value (x) ->Line No.(37)
value : VALUE_INT (5) - > Line No. (37) 
exp: value (5) ->Line No.(37)
exp: exp(x) OPERATOR_ASSIGNMENT exp(5) ->Line No.(37)
stmt : exp SEMICOLON  -> Line No. (37)
line_list : line_list stmt - > Line No.(37)

value : IDENTIFIER(x) - > Line No. (38) 
exp: value (x) ->Line No.(38)
stmt: RETURN exp(x) SEMICOLON-> Line No. (38)
line_list : line_list stmt - > Line No.(38)

funcdecl: datatype IDENTIFIER ARGUMENT_OPENBRACKET parameters ARGUMENT_CLOSEBRACKET ARGUMENT_OPENPARA stmt_list ARGUMENT_CLOSEPARA -> Line No. (39)
stmt: funcdecl -> Line No. (39)
extstmt_list : extstmt_list extstmt Line Number -> (39)


 TYPE_INT MAIN ARGUMENT_OPENBRACKET ARGUMENT_CLOSEBRACKET ARGUMENT_OPENPARA code RETURN VALUE_INT SEMICOLON ARGUMENT_CLOSEPARA extstmt_list 